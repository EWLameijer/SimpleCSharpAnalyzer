namespace Tokenizing;

internal static class Keywords
{
    internal static readonly Dictionary<string, TokenType> _dict = new()
    {
        ["abstract"] = TokenType.Abstract,
        ["as"] = TokenType.As,
        ["async"] = TokenType.Async,
        ["async"] = TokenType.Await,
        ["base"] = TokenType.Base,
        ["break"] = TokenType.Break,
        ["case"] = TokenType.Case,
        ["catch"] = TokenType.Catch,
        ["checked"] = TokenType.Checked,
        ["class"] = TokenType.Class,
        ["const"] = TokenType.Const,
        ["continue"] = TokenType.Continue,
        ["delegate"] = TokenType.Delegate,
        ["do"] = TokenType.Do,
        ["else"] = TokenType.Else,
        ["enum"] = TokenType.Enum,
        ["event"] = TokenType.Event,
        ["explicit"] = TokenType.Explicit,
        ["extern"] = TokenType.Extern,
        ["false"] = TokenType.False,
        ["finally"] = TokenType.Finally,
        ["fixed"] = TokenType.Fixed,
        ["for"] = TokenType.For,
        ["foreach"] = TokenType.ForEach,
        ["get"] = TokenType.Get,
        ["global"] = TokenType.Global,
        ["goto"] = TokenType.Goto,
        ["if"] = TokenType.If,
        ["implicit"] = TokenType.Implicit,
        ["in"] = TokenType.In,
        ["init"] = TokenType.Init,
        ["interface"] = TokenType.Interface,
        ["internal"] = TokenType.Internal,
        ["is"] = TokenType.Is,
        ["lock"] = TokenType.Lock,
        ["namespace"] = TokenType.Namespace,
        ["new"] = TokenType.New,
        ["null"] = TokenType.Null,
        ["operator"] = TokenType.Operator,
        ["out"] = TokenType.Out,
        ["override"] = TokenType.Override,
        ["params"] = TokenType.Params,
        ["partial"] = TokenType.Partial,
        ["private"] = TokenType.Private,
        ["protected"] = TokenType.Protected,
        ["public"] = TokenType.Public,
        ["readonly"] = TokenType.Readonly,
        ["record"] = TokenType.Record,
        ["ref"] = TokenType.Ref,
        ["return"] = TokenType.Return,
        ["sealed"] = TokenType.Sealed,
        ["set"] = TokenType.Set,
        ["stackalloc"] = TokenType.Stackalloc,
        ["static"] = TokenType.Static,
        ["struct"] = TokenType.Struct,
        ["switch"] = TokenType.Switch,
        ["this"] = TokenType.This,
        ["throw"] = TokenType.Throw,
        ["true"] = TokenType.True,
        ["try"] = TokenType.Try,
        ["unchecked"] = TokenType.Unchecked,
        ["unsafe"] = TokenType.Unsafe,
        ["using"] = TokenType.Using,
        ["virtual"] = TokenType.Virtual,
        ["volatile"] = TokenType.Volatile,
        ["where"] = TokenType.Where,
        ["while"] = TokenType.While,
        ["with"] = TokenType.With,
        ["yield"] = TokenType.Yield
    };
}