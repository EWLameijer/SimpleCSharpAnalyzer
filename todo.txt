phase 0: refactor - possibly with common base class for MethodLength & IdentifierAnalyzer?


// problem seems to be if() {} followed by for, as the postBraces removes the for-reference. Why the postBraces?
// because of new{ something });

// check other examples (5 left!)
? check comments - commented-out code?
? magic constants?
? Tarzan [unused tricks?]
? repeated code?  


phase 5: ?


DONE
2) parse #region Id? ... #endregion (and remove from parsing!)
1) parse undue @, but add warning about misuse! // needs to be sophisticated, not only when it is not an identifier!
?fix enum : byte bug 
phase 1: check parameters
phase 2: Mrs Malaprop
phase 4: method names 
phase 6: eliminate attributes (in early stage? So ; or {/ } before [])
phase 4: deliberately test wrong properties and names 
phase 3: classify variables, warn when incorrect 
phase 2: recognize protected & public & const  // -> Pascal 
phase 1: recognize properties // -> Pascal
1. add line length checker

--
using CSharpParser;         => using CSharpParser; OK
using DTOsAndUtilities;     => using DTOsAndUtilities; 
using SimpleCSharpAnalyzer;
using TokenBasedChecking;
using Tokenizing;

string pathname;
if (args.Length == 0)
{
    Console.Write("Geef de naam van de directory waarvan je de code-regels wilt tellen: ");
    pathname = Console.ReadLine()!;
}
else
{
    pathname = args[0];
}

Test();

void Test()
{
    const string test = "D:\\Development\\ITvitae\\C#\\SimpleCSharpAnalyzer\\SimpleCSharpAnalyzer\\SimpleCSharpAnalyzer\\Program.cs";
    FileData fileData = new(test);